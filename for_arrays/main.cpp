//Рещаем задачи на массивы и цикл for
//30/10/2019

#include <iostream>
#include <cstdlib>  //для abs()
#include <vector>   //для работы с вектором

using namespace std;

int main()
{
//    int n;              //размер вектора (число его элементов)
//    cin >> n;           //ввели число элементов для вектора
//    vector <int> a;  //создали вектор размером n
//
//    //считывание
//    for (int i = 0; i < n; i++) {
//        int tmp;    //для хранения введенного числа
//        cin >> tmp;
//        a.push_back(tmp);    //добавляем в вектор введенные числа
//
//    }
//
//    //обработка
//    //найдем номер минимального элемента
//    for (int j = 0; j < n; j++) {
//        int min_num = j; //номер минимального эл-та"
//
//            for (int i = j; i < n; i++) {
//                if (a[i] < a[min_num]) min_num = i;
//            }
//
//    //поменяем местами a[j] и минимальный элемент
//    int tmp = a[j];
//    a[j] = a[min_num];
//    a[min_num] = tmp;
//    }
//
//    //вывод
//    for (int i = 0; i < n; i++) cout << a[i] << " ";



//1. Выведите все элементы массива с четными индексами (то есть A[0], A[2], A[4], ...).
//Формат входных данных
//
//В первой строке вводится количество элементов в массиве. Во второй строке вводятся элементы массива.
//Формат выходных данных
//Выведите ответ на задачу.
//Sample Input:
//
//5
//1 2 3 4 5
//Sample Output:
//
//1 3 5

//    int n; //кол-во элементов массива
//
//    cin >> n;
//
//    vector <int> a(n); //объявили вектор а
//
//    //считывание
//    for (int i = 0; i < n; i++)
//    {
//        cin >> a[i];
//    }
//
//    //вывод
//    for (int i = 0; i < n; i += 2) cout << a[i] << " ";    //выводим только четные номера




//2. Выведите все четные элементы массива.
//Формат входных данных
//
//В первой строке вводится количество элементов в массиве. Во второй строке вводятся элементы массива.
//Формат выходных данных
//Выведите ответ на задачу. Элементы выводятся в том же порядке, в котором они стояли в массиве.
//Sample Input:
//
//7
//1 2 2 3 3 3 4
//Sample Output:
//
//2 2 4

//    int n;  //кол-во элементов в массиве
//
//    cin >> n; //вводим кол-во элементов массива
//
//    vector <int> a; //вектор а без размера
//
//    //считывание
//    for (int i = 0; i < n; i++)
//    {
//        int tmp;
//        cin >> tmp;
//        if (tmp % 2 == 0) a.push_back(tmp); //добавляем только четные числа
//    }
//
//    //вывод
//    for (int i = 0; i < a.size(); i++) cout << a[i] << " ";    //выводим вектор в консоль





//3. Найдите количество положительных элементов в данном массиве.
//Формат входных данных
//
//В первой строке вводится количество элементов в массиве. Во второй строке вводятся элементы массива.
//Формат выходных данных
//Выведите ответ на задачу.
//Sample Input:
//5
//1 -2 3 -4 5
//Sample Output:
//3


//    int n;  //кол-во элементов в массиве
//
//    cin >> n; //вводим кол-во элементов массива
//
//    vector <int> a; //вектор а без размера
//
//    //считывание
//    for (int i = 0; i < n; i++)
//    {
//        int tmp;
//        cin >> tmp;
//        if (tmp > 0) a.push_back(tmp); //добавляем только положительные числа
//    }
//
//    //вывод
//    cout << a.size();    //выводим кол-во элементов массива





//4. Дан массив чисел. Выведите все элементы массива, которые больше предыдущего элемента .
//Формат входных данных
//
//В первой строке вводится количество элементов в массиве. Во второй строке вводятся элементы массива.
//Формат выходных данных
//Выведите ответ на задачу.
//Sample Input:
//5
//1 5 2 4 3
//Sample Output:
//5 4

//    int n;  //кол-во элементов в массиве
//
//    cin >> n; //вводим кол-во элементов массива
//
//    vector <int> a; //вектор а без размера
//
//    int tmp1 = 0, tmp2 = 0; //для хранения введенных чисел
//    cin >> tmp1;    //первое введенное число
//    //считывание
//    for (int i = 1; i < n; i++)
//    {
//        cin >> tmp2;
//        if (tmp2 > tmp1) a.push_back(tmp2); //добавляем числа в конец вектора
//        tmp1 = tmp2; //сохраняем текущий элемент для последующего сравнения
//    }
//
//    //вывод
//    for (int i = 0; i < a.size(); i++) cout << a[i] << " ";    //выводим вектор в консоль



//5.Дан массив целых чисел. Если в нем есть два соседних элемента одного знака, выведите эти числа.
//Если соседних элементов одного знака нет - не выводите ничего. Если таких пар соседей несколько - выведите первую пару.
//Формат входных данных
//
//В первой строке вводится количество элементов в массиве. Во второй строке вводятся элементы массива. Все числа отличны от нуля.
//Формат выходных данных
//Выведите ответ на задачу. Элементы выводятся в порядке неубывания.
//Sample Input:
//5
//-1 2 3 -1 -2
//Sample Output:
//2 3

//    int n;  //кол-во элементов в массиве
//
//    cin >> n; //вводим кол-во элементов массива
//
//    vector <int> a; //вектор а без размера
//
//    int tmp1 = 0, tmp2 = 0; //для хранения введенных чисел
//    cin >> tmp1;    //первое введенное число
//    //считывание
//    for (int i = 1; i < n; i++)
//    {
//        cin >> tmp2;
//        if ( (tmp2 > 0 && tmp1 > 0)|| (tmp2 < 0 && tmp1 < 0) )
//        {
//            a.push_back(tmp1); //добавляем числа в конец вектора
//            a.push_back(tmp2); //добавляем числа в конец вектора
//
//
//        }
//
//        tmp1 = tmp2; //сохраняем текущий элемент для последующего сравнения
//    }
//
//    //вывод
//    if (a.size() > 0)     //выводим вектор в консоль
//    {
//        if (a[1] >= a[0] cout << a[0] << " " << a[1];
//        else cout << a[1] << " " << a[0];
//    }




//6.Выведите значение наименьшего из всех положительных элементов в массиве. Известно, что в массиве есть хотя бы один положительный элемент.
//Формат входных данных
//
//В первой строке вводится количество элементов в массиве. Во второй строке вводятся элементы массива.
//Формат выходных данных
//Выведите ответ на задачу.
//Sample Input:
//
//5
//5 -4 3 -2 1
//Sample Output:
//
//1


//    int n;  //кол-во элементов в массиве
//
//    cin >> n; //вводим кол-во элементов массива
//
//    vector <int> a; //вектор а без размера
//
//    int tmp1 = 0, min_a = 0; //для хранения введенных чисел и максимального
//
//    //считывание
//    for (int i = 0; i < n; i++)
//    {
//        cin >> tmp1;
//        if (tmp1 > 0) a.push_back(tmp1);    //добавляем в массив положительные числа
//    }
//
//    min_a = a[0]; //нулевой элемент массива условно минимальный
//
//    //обработка
//    for (int i = 1; i < a.size(); i++) {
//        if (a[i] <= min_a) min_a = a[i];
//    }
//
//    //вывод
//    cout << min_a;



//7.Выведите значение наименьшего нечетного элемента списка, а если в списке нет нечетных элементов - выведите число 0.
//
//Формат входных данных
//
//В первой строке вводится количество элементов в массиве. Во второй строке вводятся элементы массива.
//Формат выходных данных
//Выведите ответ на задачу.
//Sample Input 1:
//
//5
//0 1 2 3 4
//Sample Output 1:
//
//1
//Sample Input 2:
//
//5
//2 4 6 8 10
//Sample Output 2:
//
//0

//
//    int n;  //кол-во элементов в массиве
//
//    cin >> n; //вводим кол-во элементов массива
//
//    vector <int> a; //вектор а без размера
//
//    int tmp1 = 0, min_a = 0; //для хранения введенных чисел и минимального
//
//    //считывание
//    for (int i = 0; i < n; i++)
//    {
//        cin >> tmp1;
//        if (tmp1 % 2 != 0) a.push_back(tmp1);    //добавляем в массив нечетный числа
//    }
//
//
//
//    //обработка
//    if (a.size() != 0)  //если в массиве есть, хоть один элемент
//    {
//        min_a = a[0]; //нулевой элемент массива условно минимальный
//
//        for (int i = 1; i < a.size(); i++)  if (a[i] <= min_a) min_a = a[i];
//
//        //вывод
//        cout << min_a;
//    }
//    else    cout << 0;  //если массив пустой, то выводим 0



//Дан список, упорядоченный по неубыванию элементов в нем. Определите, сколько в нем различных элементов.
//Формат входных данных
//
//В первой строке вводится количество элементов в массиве. Во второй строке вводятся элементы массива.
//Формат выходных данных
//Выведите ответ на задачу.
//Sample Input:
//
//6
//1 2 2 3 3 3
//Sample Output:
//
//3


//    int n;  //кол-во элементов в массиве
//
//    cin >> n; //вводим кол-во элементов массива
//
//    vector <int> a; //вектор а без размера
//
//    int tmp1 = 0, sum = 1; //для хранения введенных чисел и суммы
//    //sum - кол-ва разных элементов в массиве
//
//    //считывание
//    for (int i = 0; i < n; i++)
//    {
//        cin >> tmp1;
//        a.push_back(tmp1);    //добавляем в массив числа
//    }
//
//
//
//    //обработка
//    for (int i = 1; i < a.size(); i++)
//    {
//        if (a[i] > a[i-1]) sum++;
//    }
//
//    cout << sum;






//Переставьте соседние элементы массива (A[0] c A[1], A[2] c A[3] и т.д.).
//Если элементов нечетное число, то последний элемент остается на своем месте.
//Формат входных данных
//
//В первой строке вводится количество элементов в массиве. Во второй строке вводятся элементы массива.
//Формат выходных данных
//Выведите ответ на задачу.
//Sample Input:
//
//5
//1 2 3 4 5
//Sample Output:
//
//2 1 4 3 5

//    int n;  //кол-во элементов в массиве
//
//    cin >> n; //вводим кол-во элементов массива
//
//    vector <int> a; //вектор а без размера
//
//    int tmp1 = 0; //времяночка
//
//
//    //считывание
//    for (int i = 0; i < n; i++)
//    {
//        cin >> tmp1;
//        a.push_back(tmp1);    //добавляем в массив числа
//    }
//
//
//
//    //обработка
//    //tmp1 = a [0];  //первое число = 1му элементу массива а
//
//    for (int i = 1; i < a.size(); i++)
//    {
//        if (i % 2 != 0) {     //меняем местами элементы массива, если мы стоим на нечетном
//            tmp1 = a [i-1];
//            a [i-1] = a[i];
//            a[i] = tmp1;
//        }
//    }
//    for (int i = 0; i < a.size(); i++) cout << a[i] << " ";    //выводим вектор в консоль
//


// Циклически сдвиньте элементы списка вправо
// (A[0] переходит на место A[1], A[1] на место A[2], ..., последний элемент переходит на место A[0]).
//Формат входных данных
//
//В первой строке вводится количество элементов в массиве. Во второй строке вводятся элементы массива.
//Формат выходных данных
//Выведите ответ на задачу.
//Sample Input:
//
//5
//1 2 3 4 5
//Sample Output:
//
//5 1 2 3 4

//    int n;  //кол-во элементов в массиве
//
//    cin >> n; //вводим кол-во элементов массива
//
//    vector <int> a; //вектор а без размера
//
//    int tmp1 = 0, tmp2 = 0; //времяночка
//
//
//    //считывание
//    for (int i = 0; i < n; i++)
//    {
//        cin >> tmp1;
//        a.push_back(tmp1);    //добавляем в массив числа
//    }
//
//
//
//    //обработка
//    tmp1 = a[0];    //сохраняем нулевой элемент массива
//    for (int i = 1; i < a.size(); i++)
//    {
//
//            tmp2 = a[i];//сохраняем текущий элемент массива
//            a[i] = tmp1; //ставим на место текущего предыдущий
//            tmp1 = tmp2; //в tmp1 хранится текущий элемент до замены
//
//            if (i == a.size()-1) a[0] = tmp1;   //последний меняем с нулевым
//
//    }
//
//    for (int i = 0; i < a.size(); i++) cout << a[i] << " ";    //выводим вектор в консоль




//Дан массив чисел. Посчитайте, сколько в нем пар элементов, равных друг другу.
//Считается, что любые два элемента, равные друг другу образуют одну пару, которую необходимо посчитать.
//Формат входных данных
//
//В первой строке вводится количество элементов в массиве. Во второй строке вводятся элементы массива.
//Формат выходных данных
//Выведите ответ на задачу.
//Sample Input 1:
//
//5
//1 2 3 2 3
//Sample Output 1:
//
//2
//Sample Input 2:
//
//5
//1 1 1 1 1
//Sample Output 2:
//
//10


//    int n = 0, sum = 0;  //кол-во элементов в массиве и сумма пар
//
//    cin >> n; //вводим кол-во элементов массива
//
//    vector <int> a; //вектор а без размера
//
//    int tmp1 = 0; //времяночка
//
//
//    //считывание
//    for (int i = 0; i < n; i++)
//    {
//        cin >> tmp1;
//        a.push_back(tmp1);    //добавляем в массив числа
//    }
//
//
//
//    //обработка
//    for (int i = 0; i < (a.size() - 1); i++) //цикл перебора все элементов массива
//    {
//        for (int j = i + 1; j < a.size(); j++)   //цикл для сравнения текущего элемента с каждым последующим
//        {
//                int a1 = a[i], a2 = a[j];   //для отслеживания в дебагере
//                if (a1 == a2) sum++; //если равно, то копим сумму пар
//        }
//
//    }
//
//    cout << sum;    //выводим сумму пар в консоль




//Дан массив. Выведите те его элементы, которые встречаются в массиве только один раз.
//Элементы нужно выводить в том порядке, в котором они встречаются в списке.
//Формат входных данных
//
//В первой строке вводится количество элементов в массиве. Во второй строке вводятся элементы массива.
//Формат выходных данных
//Выведите ответ на задачу.
//Sample Input 1:
//
//6
//1 2 2 3 3 3
//Sample Output 1:
//
//1
//Sample Input 2:
//
//8
//4 3 5 2 5 1 3 5
//Sample Output 2:
//
//4 2 1

//    int n = 0, sum = 0;  //кол-во элементов в массиве и сумма пар
//    int a1 = 0, a2 = 0;   //содержат текущие элементы массива a
//
//    cin >> n; //вводим кол-во элементов массива
//
//    vector <int> a; //вектор а без размера
//    vector <int> b; //вектор b содержит решение задачи
//
//    int tmp1 = 0; //времяночка
//
//
//    //считывание
//    for (int i = 0; i < n; i++)
//    {
//        cin >> tmp1;
//        a.push_back(tmp1);    //добавляем в массив числа
//    }
//
//
//    //обработка
//    for (int i = 0; i < a.size(); i++) //цикл перебора всех элементов массива
//    {
//        for (int j = 0; j < a.size(); j++)   //цикл для сравнения текущего элемента с остальными
//        {
//                a1 = a[i]; a2 = a[j];       //для отслеживания в дебагере
//                if (a1 == a2) sum++;        //если равно, то копим сумму пар
//        }
//
//        if (sum == 1) b.push_back(a1);    //если число встретилось 1 раз, в массив b его
//        sum = 0;
//
//    }
//
//    for (int i = 0; i < b.size(); i++) cout << b[i] << " ";    //выводим вектор в консоль
//
//




//Известно, что на доске 8×8 можно расставить 8 ферзей так,
//чтобы они не били друг друга. Вам дана расстановка 8 ферзей на доске,
//определите, есть ли среди них пара бьющих друг друга.
//Формат входных данных
//
//Программа получает на вход восемь пар чисел, каждое число от 1 до 8 - координаты 8 ферзей.
//Формат выходных данных
//Если ферзи не бьют друг друга, выведите слово NO, иначе выведите YES.
//
//Sample Input 1:
//
//1 7
//2 4
//3 2
//4 8
//5 6
//6 1
//7 3
//8 5
//Sample Output 1:
//
//NO
//Sample Input 2:
//
//1 8
//2 7
//3 6
//4 5
//5 4
//6 3
//7 2
//8 1
//Sample Output 2:
//
//YES

//Справка:  ферзь = слон + ладья
//Решение:
//1. Сохраняем координаты фигур в два массива x и y
//2. сравниваем координаты всех фигур по очереди в двух циклах i и j
//3. Если выполняется условие: abs_dx == abs_dy || x1 == x2 || y1 == y2, значит фигуры пересекаются. Выводим "YES" и выходим
//4. Если не выполняется условие, то идем дальше по циклам. В конце выводим "NO"

//    int n = 8; //вводим 8 пар чисел (координаты 8-ми фигур)
//
//    vector <int> X; //вектор координат X
//    vector <int> Y; //вектор координат Y
//
//    int tmp_x = 0, tmp_y = 0; //для считывания массивов
//
//
//    //считывание
//    for (int i = 0; i < n; i++)
//    {
//        cin >> tmp_x;   //сохраняем координату x
//        cin >> tmp_y;   //сохраняем координату y
//
//        X.push_back(tmp_x);    //добавляем координату в массив X
//        Y.push_back(tmp_y);    //добавляем координату в массив Y
//
//    }
//
//
//    //обработка
//
//    for (int i = 0; i < (n - 1); i++)   //цикл для выбора текущей фигуры
//    {
//        for (int j = i + 1; j < n; j++)     //вложенный цикл для сравнения
//        {
//            int dx =  abs (X[j] - X[i]);    //дельта координат x
//            int dy =  abs (Y[j] - Y[i]);    //дельта координат y
//
//            if (dx == dy || X[i] == X[j] || Y[i] == Y[j])   //если фигуры пересекаются
//            {
//                cout << "YES";  //выводим ответ
//                return 0;       //и выходим
//            }
//
//        }
//    }
//
//    cout << "NO"; //если мы сюда попали, значит фигуры не пересекаются




//N кеглей выставили в один ряд, занумеровав их слева направо числами от 1 до N.
//Затем по этому ряду бросили K шаров, при этом i-й шар сбил все кегли с номерами от li до ri включительно.
//Определите, какие кегли остались стоять на месте.
//
//Формат входных данных
//
//Программа получает на вход количество кеглей N и количество бросков K.
//Далее идет K пар чисел li, ri, при этом 1 ≤ li, ri ≤ N.
//
//Формат выходных данных
//Программа должна вывести последовательность из N символов, где j-й символ есть “I”,
//если j-я кегля осталась стоять, или “.”, если j-я кегля была сбита.
//Sample Input:
//
//10 3
//8 10
//2 5
//3 6
//Sample Output:
//
//I.....I...
//
//Объяснение условия.
//Из примера теста. Поставили 10 кеглей - это N и  сделали 3  (К) броска.
//  Первым броском сбили 8, 9, 10 кегли Вторым сбили со 2 по 5 кегли
//  Третьим броском сбили с 3 по 6 кегли (и ничего что 3, 4 и 5 кегли уже там не было)
//  В результате остались стоять 1 кегля и 7 кегля


    int n = 0, k = 0;       //кол-во кеглей и кол-во бросков
    int a1 = 0, a2 = 0;     //содержат первую и последнюю сбитые кегли
    int tmp1 = 0;           //времяночка

    cin >> n; //вводим кол-во кеглей

    vector <int> a; //массив с кеглями от 1 до n

    //--считывание
    //заполним массив а кеглями от 1 до n
    for (int i = 1; i <= n; i++) a.push_back(i);    //добавляем в массив числа
//a {1,2,...,n}

    //--обработка
    cin >> k;   //вводим число бросков

    //цикл для подсчета бросков
    for (int i = 1; i <= k; i++)
    {
        cin >> a1;  //первая сбитая кегля в текущем броске
        cin >> a2;  //последняя

        //цикл для зануления сбитых кеглей в массиве a
        for (int j = a1-1; j < a2; j++) a[j] = 0; //зануляем сбитые кегли

    }

    //вывод
    for (int i = 0; i < n; i++)
    {
        if (a[i] == 0) cout << ".";  //символ сбитой кегли
        else cout << "I";            //символ несбитой кегли
    }




    return 0;
}
