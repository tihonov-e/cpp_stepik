// Решаем задачи на условные операторы
#include <iostream>

using namespace std;

int main()
{
/*
1. Даны два целых числа. Выведите значение наибольшего из них.
Если числа равны, выведите любое из них.
Формат входных данных
Вводятся два числа.
Формат выходных данных
Выведите ответ на задачу.
*/

//    int a, b;
//
//    cin >> a >> b;
//
//    if (a >= b) cout << a;
//    else cout << b2




//2. Даны два целых числа. Программа должна вывести единицу,
//если первое число больше второго, двойку, если второе больше первого,
//или ноль, если они равны.
//
//Формат входных данных
//Вводятся два числа.
//Формат выходных данных
//Выведите ответ на задачу.
//Sample Input:
//1
//2
//Sample Output:
//2

//    int a, b;
//
//    cin >> a >> b;
//
//    if (a > b) cout << 1;
//    else if (a < b) cout << 2;
//    else cout << 0;



//3. Даны три целых числа. Найдите наибольшее из них (программа должна вывести ровно одно целое число).
// Под наибольшим в этой задаче понимается число, которое не меньше, чем любое другое.
//Формат входных данных
//Вводятся три числа.
//Формат выходных данных
//Выведите ответ на задачу.
//Sample Input:
//1
//2
//3
//Sample Output:
//3

//    int a, b, c;
//
//    cin >> a >> b >> c;
//
//    if (a >= b && a >= c) cout << a;
//    else if (b >= c && b >= a ) cout << b;
//    else cout << c;



//4. Даны три натуральных числа A, B, C. Определите, существует ли треугольник с такими сторонами.
//Если треугольник существует, выведите строку YES, иначе выведите строку NO.
//Треугольник — это три точки, не лежащие на одной прямой.
//Формат входных данных
//Вводятся три числа.
//Формат выходных данных
//Выведите ответ на задачу.
//Sample Input:
//3
//4
//5
//Sample Output:
//
//YES

//Решение
//сумма длин двух сторон должна быть больше третьей

//    int a, b, c;
//
//    cin >> a >> b >> c;
//
//    if ( (a + b) > c && (a + c) > b && (b + c) > a) cout << ("YES");
//    else cout << ("NO");



//5. Даны три целых числа. Определите, сколько среди них совпадающих.
//Программа должна вывести одно из чисел: 3 (если все совпадают),
//2 (если два совпадает) или 0 (если все числа различны).
//
//Формат входных данных
//Вводятся три числа.
//Формат выходных данных
//Выведите ответ на задачу.


//    int a, b, c;
//
//    cin >> a >> b >> c;
//     if (a == b && a == c && b == c) cout << 3;
//     else if ((a == b)  || (a == c) || (b == c)) cout << 2;
//     else cout << 0;




//6. Шахматная ладья ходит по горизонтали или вертикали.
//Даны две различные клетки шахматной доски, определите,
//может ли ладья попасть с первой клетки на вторую одним ходом.
//
//Формат входных данных
//Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер
//столбца и номер строки сначала для первой клетки, потом для второй клетки.
//Формат выходных данных
//Программа должна вывести YES, если из первой клетки ходом ладьи можно попасть во вторую или NO в противном случае.
//Sample Input:
//4
//4
//5
//5
//Sample Output:
//NO

//    int x1, y1, x2, y2;
//
//    cin >> x1 >> y1 >> x2 >> y2;
//
//    if (x1 == x2 || y1 == y2) cout << "YES";
//    else cout << "NO";





//7. Шахматный король ходит по горизонтали, вертикали и диагонали,
//но только на 1 клетку. Даны две различные клетки шахматной доски,
//определите, может ли король попасть с первой клетки на вторую одним ходом.
//
//Формат входных данных
//Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер
//столбца и номер строки сначала для первой клетки, потом для второй клетки.
//Формат выходных данных
//Программа должна вывести YES, если из первой клетки ходом короля можно п
//опасть во вторую или NO в противном случае.
//Sample Input:
//4
//4
//5
//5
//Sample Output:
//YES


//Решение - надо проверить, что вторая координата отличается от первой на +1 или -1 или они равны.

//    int x1, y1, x2, y2;
//
//    cin >> x1 >> y1 >> x2 >> y2;
//
//    if ( (x1 + 1 == x2 || x1 - 1 == x2 || x1 == x2) && (y1 + 1 == y2 || y1 - 1 == y2 || y1 == y2) ) cout << "YES";
//    else cout << "NO";






//8. Шахматный слон ходит по диагонали. Даны две различные клетки шахматной доски,
//определите, может ли слон попасть с первой клетки на вторую одним ходом.
//Формат входных данных
//Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки.
//Формат выходных данных
//Программа должна вывести YES, если из первой клетки ходом слона можно попасть во вторую или NO в противном случае.
//Sample Input:
//4
//4
//5
//5
//Sample Output:
//YES


//Решение - модули разности координат по x и по y должны быть равны.

//    int x1, y1, x2, y2;
//    int abs_dx, abs_dy; // модули разности координат
//
//    cin >> x1 >> y1 >> x2 >> y2;
//
//    abs_dx = x2 - x1; // находим разность координат по x
//    abs_dy = y2 - y1; // ... по y
//
//    if (abs_dx < 0) abs_dx *= (-1); // если отрицательная, то меняем знак
//    if (abs_dy < 0) abs_dy *= (-1);
//
//    if ( abs_dx == abs_dy ) cout << "YES"; // проверка на равенство разностей
//    else cout << "NO";





//9. Шахматный ферзь ходит по диагонали, горизонтали или вертикали. Даны две различные клетки шахматной доски,
//определите, может ли ферзь попасть с первой клетки на вторую одним ходом.
//
//Формат входных данных
//Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки,
//потом для второй клетки.
//Формат выходных данных
//Программа должна вывести YES, если из первой клетки ходом ферзя можно попасть во вторую или NO в противном случае.

// Решение: ферзь = слон + ладья


//    int x1, y1, x2, y2;
//    int abs_dx, abs_dy; // модули разности координат
//
//    cin >> x1 >> y1 >> x2 >> y2;
//
//    abs_dx = x2 - x1; // находим разность координат по x
//    abs_dy = y2 - y1; // ... по y
//

//    if (abs_dx < 0) abs_dx *= (-1); // если отрицательная, то меняем знак
//    if (abs_dy < 0) abs_dy *= (-1);
//
//    if ( abs_dx == abs_dy || x1 == x2 || y1 == y2 ) cout << "YES"; // проверка на диагонали (слон) и ортогональность (ладья)
//    else cout << "NO";


//10. Шахматный конь ходит буквой “Г” — на две клетки по вертикали в любом направлении и на одну клетку по горизонтали,
//или наоборот. Даны две различные клетки шахматной доски, определите, может ли конь попасть с первой клетки на вторую одним ходом.
//
//Формат входных данных
//Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки.
//Формат выходных данных
//Программа должна вывести YES, если из первой клетки ходом коня можно попасть во вторую или NO в противном случае.


// Решение - теорема Пифагора
// гипотенуза^2 = (dx^2 + dy^2) = (1 + 2*2) = (2*2 + 1) = 5

//    int x1, y1, x2, y2;
//
//
//    cin >> x1 >> y1 >> x2 >> y2;
//
//    int hypo2 = (x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1); // квадрат гипотенузы треугольника, образованного перемещением коня
//
//    if (hypo2 == 5) cout << "YES";  // гипотенуза для коня всегда 5
//    else cout << "NO";





//11. Шоколадка имеет вид прямоугольника, разделенного на NxM долек.
//Шоколадку можно один раз разломить по прямой на две части.
//Определите, можно ли таким образом отломить от шоколадки ровно K долек.
//
//Формат входных данных
//Программа получает на вход три числа: N, M, K
//Формат выходных данных
//Программа должна вывести одно из двух слов: YES или NO.
//Sample Input 1:
//4
//2
//6
//Sample Output 1:
//YES
//
//Sample Input 2:
//2
//10
//7
//Sample Output 2:
//NO

//решение - K должно быть меньше площади MxN и кратно M или N

//    int n, m, k;
//
//    cin >> n >> m >> k;
//
//    if ( ( (k % m == 0) || (k % n == 0) )  && (k <= m * n) ) cout << "YES";
//    else cout << "NO";




//12. Яша плавал в бассейне размером NxM метров и устал. В этот момент он обнаружил,
//что находится на расстоянии X метров от одного из длинных бортиков (не обязательно от ближайшего) и
//Y метров от одного из коротких бортиков. Какое минимальное расстояние должен проплыть Яша, чтобы выбраться из бассейна на бортик?
//
//Формат входных данных
//Программа получает на вход числа N, M, X, Y.
//Формат выходных данных
//Программа должна вывести число метров, которое нужно проплыть Яше до бортика.

//Решение:
//    - находим длинную и короткую стороны из m и n
//    - находим минимальные расстояния до длинного и короткого бортов
//    - находим минимальное значение из найденных минимальных расстояний

//    int n, m, x, y;
//    int long_side, short_side;                  // размеры длинного и короткого бортика
//    int min_to_long_side, min_to_short_side;    // мин. расстояние до бортиков
//
//    cin >> n >> m >> x >> y;
//
//    if (n > m) {                // находим какой борт длиный, а какой короткий
//            long_side = n;
//            short_side = m;
//    } else {
//            long_side = m;
//            short_side = n;
//    }
//
//
//    if ( x >= (short_side - x) ) min_to_long_side = short_side - x;     // находим мин. расстояние до длинного борта
//    else min_to_long_side = x;
//
//    if ( y >= (long_side - y) ) min_to_short_side = long_side - y;      // находим мин. расстояние до короткого борта
//    else min_to_short_side = y;
//
//    if (min_to_short_side >= min_to_long_side) cout << min_to_long_side;    // находим минимальное значение из найденных
//    else cout << min_to_short_side;



//13. Дано три числа. Упорядочите их в порядке неубывания.
//
//Формат входных данных
//Вводятся три числа.
//Формат выходных данных
//Выведите ответ на задачу.
//Sample Input:
//1
//2
//1
//Sample Output:
//1 1 2

//Решение: перебираем все возможные перестановки
//
//    int a, b, c;
//
//    cin >> a >> b >> c;
//
//    if (a <= b && a <= c && b <= c) cout << a << " " << b << " " << c;
//    else if (a <= b && a <= c && c <= b) cout << a << " " << c << " " << b;
//    else if (b <= a && b <= c && a <= c) cout << b << " " << a << " " << c;
//    else if (b <= a && b <= c && c <= a) cout << b << " " << c << " " << a;
//    else if (c <= a && c <= b && a <= b) cout << c << " " << a << " " << b;
//    else if (c <= a && c <= b && b <= a) cout << c << " " << b << " " << a;




//14. Есть две коробки, первая размером A1xB1xC1, вторая размером A2xB2xC2.
//Определите, можно ли разместить одну из этих коробок внутри другой, при условии,
//что поворачивать коробки можно только на 90 градусов вокруг ребер.
//
//Формат входных данных
//Программа получает на вход числа A1, B1, C1, A2, B2, C2.
//Формат выходных данных
//Программа должна вывести одну из следующих строчек:
//Boxes are equal, если коробки одинаковые,
//The first box is smaller than the second one, если первая коробка может быть положена во вторую,
//The first box is larger than the second one, если вторая коробка может быть положена в первую,
//Boxes are incomparable, во всех остальных случаях.

//Решение:
//    - сортируем размеры каждой коробки по возрастанию, как в задаче №13
//    - сравниваем соответствующие размеры между собой

//    int a1, b1, c1, a2, b2, c2;
//    int x1, y1, z1, x2, y2, z2; // упорядоченные по возрастанию размеры коробок
//
//    cin >> a1 >> b1 >> c1 >> a2 >> b2 >> c2;
//
//    // расставим размеры по возрастания слева направо
//
//    // для первой коробки
//    // перебираем все возможные варианты
//
//    if (a1 <= b1 && c1 >= b1) {
//        x1 = a1; y1 = b1; z1 = c1;
//
//    } else if (a1 <= c1 && b1 >= c1) {
//        x1 = a1; y1 = c1; z1 = b1;
//
//    } else if (b1 <= a1 && c1 >= a1) {
//        x1 = b1; y1 = a1; z1 = c1;
//
//    } else if (b1 <= c1 && a1 >= c1) {
//        x1 = b1; y1 = c1; z1 = a1;
//
//    } else if (c1 <= a1 && b1 >= a1) {
//        x1 = c1; y1 = a1; z1 = b1;
//
//    } else if (c1 <= b1 && a1 >= b1) {
//        x1 = c1; y1 = b1; z1 = a1;
//    }
//
//
//    // для второй коробки
//
//    if (a2 <= b2 && c2 >= b2) {
//        x2 = a2; y2 = b2; z2 = c2;
//
//    } else if (a2 <= c2 && b2 >= c2) {
//        x2 = a2; y2 = c2; z2 = b2;
//
//    } else if (b2 <= a2 && c2 >= a2) {
//        x2 = b2; y2 = a2; z2 = c2;
//
//    } else if (b2 <= c2 && a2 >= c2) {
//        x2 = b2; y2 = c2; z2 = a2;
//
//    } else if (c2 <= a2 && b2 >= a2) {
//        x2 = c2; y2 = a2; z2 = b2;
//
//    } else if (c2 <= b2 && a2 >= b2) {
//        x2 = c2; y2 = b2; z2 = a2;
//    }
//
//
//    // проверяем коробоки на совместимость
//    // толщиной стенки можно пренебречь
//
//    if (x1 == x2 && y1 == y2 && z1 == z2) cout << "Boxes are equal";
//    else if (x1 >= x2 && y1 >= y2 && z1 >= z2) cout << "The first box is larger than the second one";
//    else if (x1 <= x2 && y1 <= y2 && z1 <= z2) cout << "The first box is smaller than the second one";
//    else cout << "Boxes are incomparable";

    return 0;
}
